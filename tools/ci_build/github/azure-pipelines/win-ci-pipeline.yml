jobs:
- job: 'build'
  pool: 'chasuntest1'
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfig: 'Debug'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-detailedsummary -maxcpucount -consoleloggerparameters:PerformanceSummary'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    EnvSetupScript: setup_env.bat
    buildArch: x64
    setVcvars: true
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '0'
  timeoutInMinutes: 120
  workspace:
    clean: all
  steps:    
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: $(buildArch)

  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     set ORT_DOXY_SRC=$(Build.SourcesDirectory)
     set ORT_DOXY_OUT=$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)
     mkdir %ORT_DOXY_SRC% 
     mkdir %ORT_DOXY_OUT%
     "C:\Program Files\doxygen\bin\doxygen.exe" $(Build.SourcesDirectory)\tools\ci_build\github\Doxyfile_csharp.cfg
     
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'API Documentation Check and generate'

  - script: |
     python -m pip install -q pyopenssl setuptools wheel numpy flake8
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'

  - powershell: |
     $Env:USE_MSVC_STATIC_RUNTIME=1
     $Env:ONNX_ML=1
     $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
     python setup.py bdist_wheel
     python -m pip uninstall -y onnx -qq
     Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}   
    workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'
    displayName: 'Install ONNX'

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 5.7.0
    inputs:
      versionSpec: 5.7.0

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      restoreSolution: '$(Build.SourcesDirectory)\packages.config'
      nugetConfigPath: '$(Build.SourcesDirectory)\NuGet.config'
      restoreDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)'

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--gen_doc --config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --build_wheel --use_dnnl --use_winml  --build_shared_lib --enable_onnx_tests --enable_wcos --build_java --build_nodejs'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: 'x64'
      configuration: $(BuildConfig)
      msbuildArgs: $(MsbuildArguments)
      msbuildArchitecture: $(buildArch)
      maximumCpuCount: true
      logProjectEvents: false
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true


  - task: PythonScript@0
    displayName: 'Regenerate cmake config with STATIC_ANALYSIS=ON '
    condition: and(succeeded(), eq(variables['BuildConfig'], 'Debug'))
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config Debug --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --build_wheel --build_shared_lib --enable_onnx_tests --cmake_extra_defines onnxruntime_ENABLE_STATIC_ANALYSIS=ON'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: DeleteFiles@1
    displayName: 'Delete files from $(Build.BinariesDirectory)\Debug'
    condition: and(succeeded(), eq(variables['BuildConfig'], 'Debug'))
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\Debug'
      Contents: |
       **/*.obj
       **/*.pdb
       **/*.dll
      
  #Manually set msBuildCommandline so that we can also set CAExcludePath
  - task: SDLNativeRules@2
    displayName: 'Run the PREfast SDL Native Rules for MSBuild'
    condition: and(succeeded(), eq(variables['BuildConfig'], 'Debug'))
    inputs:
      userProvideBuildInfo: msBuildInfo
      msBuildVersion: 16.0
      msBuildArchitecture: x64
      msBuildCommandline: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64\msbuild.exe" "$(Build.BinariesDirectory)\Debug\onnxruntime.sln" /p:platform=x64 /p:configuration="Debug" /p:CAExcludePath="$(Build.BinariesDirectory);$(Build.SourcesDirectory)\cmake;C:\program files (x86)" /p:VisualStudioVersion="16.0" /m /p:PreferredToolArchitecture=x64'
    continueOnError: true 


  - task: SdtReport@2
    displayName: 'Create Security Analysis Report'
    inputs:
      SDLNativeRules: true

  - task: PublishSecurityAnalysisLogs@3
    displayName: 'Publish Security Analysis Logs'
    inputs:
      ArtifactName: CodeAnalysisLogs

  - task: PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      SDLNativeRules: true
      ToolLogsNotFoundAction: Error

  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**/*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: succeededOrFailed()

  - template: templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

